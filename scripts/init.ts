import * as fs from "fs";
import * as path from "path";
import * as toml from "@iarna/toml";

const tomlPath = path.resolve(__dirname, "../defaults.toml");
const tomlSrc = fs.readFileSync(tomlPath, "utf-8");
const config = toml.parse(tomlSrc) as any;

// Ensure showRankingOverride is present in plugin config
if (!("showRankingOverride" in config.plugin)) {
  config.plugin.showRankingOverride = false;
}

const configOut = `// THIS FILE IS AUTO‐GENERATED — DO NOT EDIT
import { TyperPluginSettings } from "../types";

export interface PluginConfig {
  minWordLength: number;
  maxSuggestions: number;
  debounceTime: number;
  numberSelection: boolean;
  showRankingOverride: boolean;
}

export interface InternalsConfig {
  maxChars: number;
}

export interface LimitsConfig {
  minWordLength: { min: number; max: number };
  maxSuggestions: { min: number; max: number };
  debounceTime: { min: number; max: number };
}

export interface StyleConfig {
    padding: string;
    rank_size: number;
    rank_border_radius: string;
    rank_margin_right: number;
    rank_bg_opacity: number;
    rank_font_size: number;
    selected_rank_bg_opacity: number;
}

export interface KeybindsConfig {
  up: string[];
  down: string[];
  select: string[];
  close: string[];
  numberSelect: string[];
  tabNext: string[];
  tabPrev: string[];
  macosUp: string[];
  macosDown: string[];
  vimUp: string[];
  vimDown: string[];
  vimAltUp: string[];
  vimAltDown: string[];
  insertSpaceAfter: boolean;
}

export interface KeybindModesConfig {
  available: string[];
  default: string;
}

export interface ConfigType {
  plugin: PluginConfig;
  internals: InternalsConfig;
  limits: LimitsConfig;
  style: StyleConfig;
  keybinds: KeybindsConfig;
  keybind_modes: KeybindModesConfig;
}

// Auto-generated config values
export const CONFIG: ConfigType = ${JSON.stringify(config, null, 2)};

export const DEFAULT_SETTINGS: TyperPluginSettings = {
  minWordLength: CONFIG.plugin.minWordLength,
  maxSuggestions: CONFIG.plugin.maxSuggestions,
  debounceTime: CONFIG.plugin.debounceTime,
  numberSelection: CONFIG.plugin.numberSelection,
  showRankingOverride: CONFIG.plugin.showRankingOverride,
};
`;
fs.writeFileSync(path.resolve(__dirname, "../src/core/config.ts"), configOut);
console.log("config.ts generated");

const s = config.style;
const cssOut = `/* THIS FILE IS AUTOGENERATED via scripts/ */

/* Suggestions dropdown */
.typer-suggestion-container {
  display: flex;
  align-items: center;
  padding: ${s.padding};
  cursor: pointer;
  font-family: var(--font-text), var(--font-text-theme),
    var(--font-monospace),var(--font-monospace-theme), sans-serif, serif, monospace ;
}

.typer-suggestion-rank {
  display: inline-block;
  width: ${s.rank_size}px;
  height: ${s.rank_size}px;
  flex-shrink: 0;
  border-radius: ${s.rank_border_radius};
  margin-right: ${s.rank_margin_right}px;

  background-color: color-mix(in srgb, var(--interactive-accent) ${s.rank_bg_opacity}%, transparent);
  color: var(--text-accent);

  font-size: ${s.rank_font_size}px;
  text-align: center;
  line-height: ${s.rank_size}px;
}

.typer-suggestion-content {
  flex-grow: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Selected suggestion */
.suggestion-item.is-selected .typer-suggestion-rank {
  background-color: color-mix(in srgb, var(--interactive-accent) ${s.selected_rank_bg_opacity}%, transparent);
}
`;

fs.writeFileSync(path.resolve(__dirname, "../styles.css"), cssOut);
console.log("styles.css generated");
